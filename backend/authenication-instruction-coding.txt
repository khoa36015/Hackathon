Hàm Băm (Hashing) là gì?Trước hết, bạn cần hiểu hai đặc tính quan trọng của hàm băm:Là đường một chiều (One-way): Bạn có thể dễ dàng tạo ra chuỗi băm từ mật khẩu, nhưng không thể (hoặc cực kỳ khó) dịch ngược chuỗi băm để tìm lại mật khẩu gốc.Ví dụ: Hash("password123") $\rightarrow$ abc123xyzNhưng: Reverse("abc123xyz") $\rightarrow$ $\text{Không thể ra "password123"}$Tính duy nhất (Deterministic): Cùng một mật khẩu (và cùng một số yếu tố bổ sung) sẽ luôn tạo ra cùng một chuỗi băm.Ví dụ: Hash("pass123") luôn ra chuoi_A, nhưng Hash("pass124") sẽ ra chuoi_B hoàn toàn khác.Các hàm băm hiện đại, an toàn thường được dùng cho mật khẩu là Bcrypt, Scrypt, hoặc Argon2 (chứ không phải các hàm cũ như MD5 hay SHA-1, vốn đã không còn an toàn).Luồng Hoạt Động Của Hệ Thống Xác ThựcHãy xem cách hệ thống sử dụng hàm băm trong thực tế.1. Khi Người Dùng Đăng Ký (Registration)Đây là quá trình tạo tài khoản mới:Người dùng nhập: Người dùng cung cấp username và password (ví dụ: matkhaucuatoi123).Server tạo "Muối" (Salt): Server tạo ra một chuỗi ký tự ngẫu nhiên và duy nhất cho người dùng này, gọi là "salt" (ví dụ: xyz_random_string_789). "Salt" rất quan trọng, sẽ được giải thích ở phần sau.Server băm mật khẩu: Server kết hợp mật khẩu của người dùng với "salt" rồi mới đưa qua hàm băm (ví dụ: Bcrypt("matkhaucuatoi123" + "xyz_random_string_789")).Kết quả: Quá trình này tạo ra một chuỗi băm (hashed password) (ví dụ: $2a$10$N9qo8uLOickgx2ZMRZoMye.b...).Lưu trữ: Server lưu username, hashed_password, và salt vào cơ sở dữ liệu (CSDL).Quan trọng: Server hủy bỏ mật khẩu gốc matkhaucuatoi123. Nó không bao giờ được lưu lại.Bảng CSDL (ví dụ):usernamehashed_passwordsaltuser_A$2a$10$N9qo8uLOickgx2ZMRZoMye...xyz_random_string_7892. Khi Người Dùng Đăng Nhập (Login)Đây là quá trình xác thực khi người dùng quay lại:Người dùng nhập: Người dùng nhập username và password (ví dụ: họ nhập matkhaucuatoi123).Server truy vấn CSDL: Server dùng username để tìm tài khoản trong CSDL.Server lấy thông tin: Server lấy ra hashed_password (chuỗi $2a$10...) và salt (xyz_random_string_789) đã lưu của user đó.Server băm lại: Server lấy mật khẩu matkhaucuatoi123 mà người dùng vừa nhập, kết hợp nó với salt (xyz_random_string_789) vừa lấy từ CSDL.Server chạy hàm băm: Server dùng đúng hàm băm (Bcrypt) để băm chuỗi kết hợp đó.So sánh: Server so sánh chuỗi băm mới tạo ra ở bước 5 với chuỗi hashed_password đã lưu trong CSDL ở bước 3.Nếu TRÙNG KHỚP: Mật khẩu chính xác. Server cho phép người dùng đăng nhập (thường bằng cách tạo một session hoặc JWT token).Nếu KHÔNG KHỚP: Mật khẩu sai. Server báo lỗi "Sai tên đăng nhập hoặc mật khẩu".Tại sao phải dùng "Salt" (Muối)?Bạn có thể thắc mắc tại sao phải thêm "salt". Đây là lý do bảo mật then chốt:Giả sử hai người dùng (User A và User B) đều đặt mật khẩu là "123456".Không có Salt:Hash("123456") $\rightarrow$ hash_XCả hai người dùng sẽ có cùng một chuỗi băm hash_X trong CSDL.Nếu một kẻ tấn công biết hash_X là của "123456" (thông qua các "bảng cầu vồng" - Rainbow Tables), hắn có thể dò ra mật khẩu của tất cả người dùng có chuỗi băm đó.Có Salt (An toàn):User A có salt salt_A. Hash: Hash("123456" + "salt_A") $\rightarrow$ hash_A_khac_bietUser B có salt salt_B. Hash: Hash("123456" + "salt_B") $\rightarrow$ hash_B_khac_bietMặc dù cùng mật khẩu "123456", hai chuỗi băm lưu trong CSDL là hash_A và hash_B (hoàn toàn khác nhau). Điều này khiến việc tấn công bằng Rainbow Table trở nên vô dụng.Tóm Tắt Lợi ÍchSử dụng hàm băm và salt là tiêu chuẩn vàng trong bảo mật mật khẩu vì:Bảo vệ người dùng: Nếu CSDL của trang web bị rò rỉ (leak), kẻ tấn công chỉ lấy được các chuỗi băm và salt. Chúng không thể biết mật khẩu gốc của người dùng là gì.Bảo vệ nhà phát triển: Ngay cả quản trị viên hệ thống cũng không thể "nhìn thấy" mật khẩu của người dùng, giúp tăng tính tin cậy và tuân thủ các quy định về quyền riêng tư.